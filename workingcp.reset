#!/bin/bash

# UTILS

###


echo "$0" ARGS: "$@"


while getopts "s:n:" opt; do
  case $opt in
    s)
      echo "d:" $OPTARG
      OPT_SIZE=$OPTARG
      ;;
    n)
      echo "n:" $OPTARG
      OPT_NAME=$OPTARG
      ;;
  esac
done

shift $(($OPTIND-1))

RAW_WC_PATH=$1

# Normalize path
WC_PATH=$( cd $RAW_WC_PATH; pwd )

echo  PATH: $WC_PATH
WC_ID_PATH=$( echo $WC_PATH | sed 's#/#_._#g' )
WC_ID=wc${WC_ID_PATH}
WC_ID_NAME=${OPT_NAME:=default}
WC_VG=${WC_ID}_VOL1
WC_LV=${WC_ID}_master
WC_BRANCH=${WC_ID}_${WC_ID_NAME}
WC_DEVICE=/dev/${WC_VG}/${WC_LV}
WC_BRANCH_DEVICE=/dev/${WC_VG}/${WC_BRANCH}
echo $WC_DEVICE
if [ ! -b $WC_DEVICE ]
then
  echo "ERROR: Path not init'ed. exiting..."
  exit
fi

echo $WC_BRANCH_DEVICE
if [ ! -b $WC_BRANCH_DEVICE ]
then
  echo "ERROR: Branch [$WC_ID_NAME] doesn't exist, can't reset. exiting..."
  exit
fi

# @todo resize
echo ...sizing
LV_SIZE=$( lvs --noheadings --units m -o lv_size $WC_BRANCH_DEVICE | sed 's/^.* \([0-9]\+\)\.[0-9]\+m.*$/\1/' )

echo "SZ: ${LV_SIZE}m"

# unmount if mounted
MNT_POINT=$( mount | grep $WC_BRANCH | cut -f3 -d' '  )
if [ $MNT_POINT ]
then
  echo umount $MNT_POINT
  umount $MNT_POINT || { echo "ERROR: unable to umount $MNT_POINT exiting..."; exit; }
fi

# delete snapshot 
lvremove $WC_BRANCH_DEVICE

# re-create snapshot 
echo lvcreate -s -L${LV_SIZE}M -n$WC_BRANCH $WC_DEVICE
lvcreate -s -L${LV_SIZE}M -n$WC_BRANCH $WC_DEVICE

# re-mount, maybe
if [ $MNT_POINT ]
then
  echo mount $WC_BRANCH_DEVICE $MNT_POINT
  mount $WC_BRANCH_DEVICE $MNT_POINT
fi

